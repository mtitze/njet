Automatic differentiation
=========================

Automatic (forward-mode) differentiation (AD) is performed here by first
defining a function as a composition of elementary functions (as shown
in the introduction).

There is NumPy and SymPy support. For example, running each
AD step separately ...

.. code-block:: python

    from njet import derive, exp

    d2 = derive(lambda x, y: exp(-x**2 + y), order=3)
    lin = np.linspace(3, 4, 4)

    for e in lin:
        print( d2.eval([2.1, e]) )

    {(1, 0): -1.0254017892444356, (0, 1): 0.24414328315343706, (2, 0): 3.818400948519755, (1, 1): -1.0254017892444356, (0, 2): 0.24414328315343706, (2, 1): 3.8184009485197556, (0, 3): 0.24414328315343706, (3, 0): -11.935676826805235, (1, 2): -1.0254017892444356}
    {(1, 0): -1.4310634777750424, (0, 1): 0.34072939947024816, (2, 0): 5.329007807714682, (1, 1): -1.4310634777750424, (0, 2): 0.34072939947024816, (2, 1): 5.329007807714681, (0, 3): 0.34072939947024816, (3, 0): -16.657578881301497, (1, 2): -1.4310634777750422}
    {(1, 0): -1.9972099706697595, (0, 1): 0.47552618349279985, (2, 0): 7.4372295098273895, (1, 1): -1.9972099706697595, (0, 2): 0.47552618349279985, (2, 1): 7.4372295098273895, (0, 3): 0.47552618349279985, (3, 0): -23.247524058596003, (1, 2): -1.9972099706697595}
    {(1, 0): -2.7873310505725413, (0, 1): 0.6636502501363193, (2, 0): 10.379489912132033, (1, 1): -2.7873310505725413, (0, 2): 0.6636502501363193, (2, 1): 10.379489912132033, (0, 3): 0.6636502501363193, (3, 0): -32.44453342866438, (1, 2): -2.787331050572541}

... can be speed up by directly passing the NumPy arrays into the code:

.. code-block:: python
   
    d2.eval([2.1, lin])

    {(1, 0): array([-1.02540179, -1.43106348, -1.99720997, -2.78733105]),
     (0, 1): array([0.24414328, 0.3407294 , 0.47552618, 0.66365025]),
     (2, 0): array([ 3.81840095,  5.32900781,  7.43722951, 10.37948991]),
     (1, 1): array([-1.02540179, -1.43106348, -1.99720997, -2.78733105]),
     (0, 2): array([0.24414328, 0.3407294 , 0.47552618, 0.66365025]),
     (2, 1): array([ 3.81840095,  5.32900781,  7.43722951, 10.37948991]),
     (0, 3): array([0.24414328, 0.3407294 , 0.47552618, 0.66365025]),
     (3, 0): array([-11.93567683, -16.65757888, -23.24752406, -32.44453343]),
     (1, 2): array([-1.02540179, -1.43106348, -1.99720997, -2.78733105])}

It is also possible to pass SymPy symbols:

.. code-block:: python

    from Sympy import Symbol
    d2.eval([Symbol('x'), Symbol('y')])

    {(1, 0): -2.0*x*exp(-x**2 + y),
     (0, 1): 1.0*exp(-x**2 + y),
     (2, 0): 4.0*x**2*exp(-x**2 + y) - 2.0*exp(-x**2 + y),
     (1, 1): -2.0*x*exp(-x**2 + y),
     (0, 2): 1.0*exp(-x**2 + y),
     (2, 1): 4.0*x**2*exp(-x**2 + y) - 2.0*exp(-x**2 + y),
     (0, 3): 1.0*exp(-x**2 + y),
     (3, 0): -8.0*x**3*exp(-x**2 + y) + 12.0*x*exp(-x**2 + y),
     (1, 2): -2.0*x*exp(-x**2 + y)}

In the following the AD routines are explained in more detail.

.. automodule:: njet.ad
    :members:

